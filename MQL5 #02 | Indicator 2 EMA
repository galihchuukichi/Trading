#property copyright "Copyright 2023"
#property link "https://www.google.com"
#property version "1.00"
#property indicator_chart_window

#property indicator_buffers 2 // HOw many data buffers are we using
#property indicator_plots 2   // How many indicators are being drawn on the screen

#property indicator_type1 DRAW_LINE          //
#property indicator_label1 "SlowMA"          //
#property indicator_color1 clrGold        //
#property indicator_style1 STYLE_SOLID      //
#property indicator_width1 3                //

#property indicator_type2 DRAW_LINE          //
#property indicator_label2 "FAST MA"          //
#property indicator_color2 clrLime        //
#property indicator_style2 STYLE_SOLID      //
#property indicator_width2 1                //



// |----------------------------------------------------------
// INPUT DATA

input int            inStrongMA        = 34;          // Strong EMA Length
input ENUM_MA_METHOD inTypeStrongMA    = MODE_EMA;    // Strong EMA Type
input int            inFastMA          = 13;          // Fast EMA Length
input ENUM_MA_METHOD inTypeFastMA      = MODE_EMA;    // Fast EMA Type
input int            inSignalMA        = 5;           // Signal EMA Length
input ENUM_MA_METHOD inTypeSignalMA    = MODE_EMA;    // Signal EMA Type

// |----------------------------------------------------------

double bufferFast[], bufferSlow[], bufferSignal[];
int fastHandle,slowHandle,signalHandle,maxPeriod;


int OnInit(){
   SetIndexBuffer(0,bufferSlow, INDICATOR_DATA);
   SetIndexBuffer(1,bufferFast, INDICATOR_DATA);
   
   
   maxPeriod      = (int) MathMax(MathMax(inSignalMA,inFastMA),inStrongMA);

   slowHandle     = iMA(Symbol(), Period(),inStrongMA, 0, inTypeStrongMA, PRICE_CLOSE);
   fastHandle     = iMA(Symbol(), Period(), inFastMA, 0, inTypeFastMA, PRICE_CLOSE);
   signalHandle   = iMA(Symbol(), Period(), inSignalMA, 0, inTypeSignalMA, PRICE_CLOSE);
    
   PlotIndexSetInteger(0,PLOT_DRAW_BEGIN,maxPeriod);
   PlotIndexSetInteger(1,PLOT_DRAW_BEGIN,maxPeriod);
   
   return(INIT_SUCCEEDED);
}

void OnDeinit(const int reason){
   if(slowHandle != INVALID_HANDLE)
      IndicatorRelease(slowHandle);
   if(fastHandle != INVALID_HANDLE)
      IndicatorRelease(fastHandle);
   if(signalHandle != INVALID_HANDLE)
      IndicatorRelease(signalHandle);
   
}




int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[]){

   if(IsStopped())         // Must respect the stop flag
      return (0);
   if(rates_total < maxPeriod)
      return (0);
      
   // Check that the MA have all been calculated
   if(BarsCalculated(slowHandle) < rates_total) return (0);
   if(BarsCalculated(fastHandle) < rates_total) return (0);
   if(BarsCalculated(signalHandle) < rates_total) return (0);
   
   int copyBars = 0;
   if(prev_calculated > rates_total || prev_calculated <= 0)
      copyBars = rates_total;
   else {
      copyBars = rates_total - prev_calculated;
      if(prev_calculated > 0) copyBars++;
   }      
   
   if(IsStopped())
      return (0);
   if(CopyBuffer(slowHandle,0,0,copyBars,bufferSlow) <= 0)
      return (0);     
   if(CopyBuffer(fastHandle,0,0,copyBars,bufferFast) <= 0)
      return (0);         
          
   return (rates_total);
}

